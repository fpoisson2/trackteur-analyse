name: Release

on:
  push:
    branches: [main, dev]
    paths-ignore:
      - "__version__.py"

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Fetch all tags
        run: |
          git fetch --tags --force --prune

      - name: "Calculate version (CALVER with beta)"
        id: calver
        shell: bash
        run: |
          set -euo pipefail

          # Date en UTC pour la reproductibilité
          YEAR=$(date -u +%Y)
          MONTH_PAD=$(date -u +%m)        # 01..12
          MONTH_NOPAD=$((10#$MONTH_PAD))  # 1..12 (retire le zéro)

          # Deux formes possibles de base pour matcher l'historique (08 et 8)
          BASE_NOPAD="$YEAR.$MONTH_NOPAD"
          BASE_PAD="$YEAR.$MONTH_PAD"

          # Liste des tags disponibles
          TAGS="$(git tag --list)"

          # Dernier STABLE du mois courant (accepte 2025.8.N et 2025.08.N)
          LAST_STABLE=$(
            printf "%s\n" "$TAGS" \
            | grep -E "^(${BASE_NOPAD}|${BASE_PAD})\.[0-9]+$" || true
          )
          LAST_STABLE=$(
            printf "%s\n" "$LAST_STABLE" \
            | sed -E "s#^(${BASE_NOPAD}|${BASE_PAD})\.##" \
            | sort -n | tail -n 1
          )
          if [ -z "${LAST_STABLE:-}" ]; then LAST_STABLE=0; fi
          NEXT=$((LAST_STABLE + 1))

          # Nom simple de la branche (dev / main)
          REF_NAME="${GITHUB_REF_NAME:-$(echo "${GITHUB_REF:-}" | awk -F/ '{print $NF}')}"
          
          if [ "$REF_NAME" = "dev" ]; then
            # Cherche les betas existants pour NEXT et prend le plus grand N de bN
            LAST_BETA=$(
              printf "%s\n" "$TAGS" \
              | grep -E "^(${BASE_NOPAD}|${BASE_PAD})\.${NEXT}b[0-9]+$" || true
            )
            LAST_BETA=$(
              printf "%s\n" "$LAST_BETA" \
              | sed -E "s#^(${BASE_NOPAD}|${BASE_PAD})\.${NEXT}b##" \
              | sort -n | tail -n 1
            )
            if [ -z "${LAST_BETA:-}" ]; then LAST_BETA=0; fi
            VERSION="${BASE_NOPAD}.${NEXT}b$((LAST_BETA + 1))"
          else
            VERSION="${BASE_NOPAD}.${NEXT}"
          fi

          echo "Computed VERSION=$VERSION"
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"

      - name: Update __version__.py
        run: |
          cat > __version__.py <<EOF
          """Application version information.

          This file is automatically updated by the release workflow.
          """
          __version__ = "${{ steps.calver.outputs.version }}"
          EOF

      - name: Commit version file (no-op safe)
        env:
          GIT_AUTHOR_NAME: github-actions[bot]
          GIT_AUTHOR_EMAIL: github-actions[bot]@users.noreply.github.com
          GIT_COMMITTER_NAME: github-actions[bot]
          GIT_COMMITTER_EMAIL: github-actions[bot]@users.noreply.github.com
        run: |
          git add __version__.py
          git commit -m "chore: bump version to ${{ steps.calver.outputs.version }}" || echo "No changes to commit"
          git push || echo "Nothing to push"

      - name: Create tag
        run: |
          if git rev-parse -q --verify "refs/tags/${{ steps.calver.outputs.version }}" >/dev/null; then
            echo "Tag already exists, skipping tag creation."
          else
            git tag ${{ steps.calver.outputs.version }}
            git push origin ${{ steps.calver.outputs.version }}
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.calver.outputs.version }}
          name: ${{ steps.calver.outputs.version }}
          draft: false
          prerelease: ${{ contains(steps.calver.outputs.version, 'b') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
